<template>
  <transition name="fade-transform" appear>
    <div v-if="!hasData" class="bg-white rounded-xl shadow-lg p-8 text-center">
      <FileWarning class="h-16 w-16 text-gray-300 mx-auto mb-4" />
      <h3 class="text-xl font-semibold text-gray-900 mb-2">No Data Available</h3>
      <p class="text-gray-600">Please upload a dataset first.</p>
    </div>

    <div v-else-if="!isProcessed" class="bg-white rounded-xl shadow-lg p-8 text-center">
      <SlidersHorizontal class="h-16 w-16 text-blue-400 mx-auto mb-4" />
      <h3 class="text-xl font-semibold text-gray-900 mb-2">Data Not Processed</h3>
      <p class="text-gray-600">Please go to the 'Process Data' tab to prepare your dataset before training.</p>
    </div>

    <div v-else class="space-y-6">
      <div class="bg-white rounded-xl shadow-lg p-6">
        <h2 class="text-2xl font-semibold text-gray-900 mb-6">Select ML Model</h2>
        <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
          <div
            v-for="model in models"
            :key="model.id"
            @click="selectedModel = model.id"
            :class="[
              'p-4 border-2 rounded-lg cursor-pointer transition-colors',
              selectedModel === model.id
                ? 'border-blue-500 bg-blue-50'
                : 'border-gray-200 hover:border-gray-300'
            ]"
          >
            <h3 class="font-semibold text-gray-900 mb-2">{{ model.name }}</h3>
            <p class="text-gray-600 text-sm mb-2">{{ model.description }}</p>
            <p class="text-blue-600 text-xs font-semibold">{{ model.useCase }}</p>
          </div>
        </div>
      </div>

      <transition name="fade-transform">
        <div v-if="selectedModel" class="bg-white rounded-xl shadow-lg p-6">
          <h3 class="text-xl font-semibold text-gray-900 mb-4">Training Configuration</h3>
          <div class="grid md:grid-cols-2 gap-6">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">
                Target Column
              </label>
              <select class="w-full p-3 border border-gray-300 rounded-lg">
                <option>price</option>
                <option>sales</option>
                <option>rating</option>
                <option>category</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">
                Test Split (%)
              </label>
              <input
                type="number"
                value="20"
                class="w-full p-3 border border-gray-300 rounded-lg"
              />
            </div>
          </div>

          <div class="mt-6">
            <button
              @click="handleTraining"
              :disabled="isTraining"
              class="flex items-center space-x-2 bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              <template v-if="isTraining">
                <Activity class="h-5 w-5 animate-spin" />
                <span>Training Model...</span>
              </template>
              <template v-else>
                <Play class="h-5 w-5" />
                <span>Start Training</span>
              </template>
            </button>
          </div>
        </div>
      </transition>

      <transition name="fade-transform">
        <div v-if="isTraining" class="bg-white rounded-xl shadow-lg p-6">
          <h3 class="text-xl font-semibold text-gray-900 mb-4">Training Progress</h3>
          <div class="space-y-4">
            <div>
              <div class="flex justify-between text-sm mb-1">
                <span>Data Preprocessing</span>
                <span>100%</span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-2">
                <div class="bg-green-600 h-2 rounded-full w-full"></div>
              </div>
            </div>
            <div>
              <div class="flex justify-between text-sm mb-1">
                <span>Model Training</span>
                <span>65%</span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-2">
                <div class="bg-blue-600 h-2 rounded-full w-2/3 transition-all duration-1000"></div>
              </div>
            </div>
            <div>
              <div class="flex justify-between text-sm mb-1">
                <span>Validation</span>
                <span>0%</span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-2">
                <div class="bg-gray-400 h-2 rounded-full w-0"></div>
              </div>
            </div>
          </div>
        </div>
      </transition>

      <transition name="fade-transform">
        <div v-if="trainingComplete" class="bg-white rounded-xl shadow-lg p-6">
          <div class="flex items-center space-x-2 mb-4">
            <CheckCircle class="h-6 w-6 text-green-600" />
            <h3 class="text-xl font-semibold text-gray-900">Training Complete</h3>
          </div>

          <div class="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
            <div class="text-center">
              <div class="text-3xl font-bold text-green-600 mb-1">94.2%</div>
              <div class="text-gray-600">Accuracy</div>
            </div>
            <div class="text-center">
              <div class="text-3xl font-bold text-blue-600 mb-1">92.8%</div>
              <div class="text-gray-600">Precision</div>
            </div>
            <div class="text-center">
              <div class="text-3xl font-bold text-purple-600 mb-1">95.1%</div>
              <div class="text-gray-600">Recall</div>
            </div>
            <div class="text-center">
              <div class="text-3xl font-bold text-orange-600 mb-1">93.9%</div>
              <div class="text-gray-600">F1-Score</div>
            </div>
          </div>

          <div class="mt-6 p-4 bg-gray-50 rounded-lg">
            <h4 class="font-semibold text-gray-900 mb-2">Confusion Matrix</h4>
            <div class="grid grid-cols-2 gap-2 text-center text-sm">
              <div class="bg-green-100 p-2 rounded">TP: 456</div>
              <div class="bg-red-100 p-2 rounded">FP: 32</div>
              <div class="bg-red-100 p-2 rounded">FN: 28</div>
              <div class="bg-green-100 p-2 rounded">TN: 484</div>
            </div>
          </div>

          <div class="mt-6 flex space-x-4">
            <button class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
              Deploy Model
            </button>
            <button class="border border-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-50 transition-colors">
              Download Model
            </button>
          </div>
        </div>
      </transition>
    </div>
  </transition>
</template>

<script setup lang="ts">
import { ref } from 'vue';
import { Play, Activity, CheckCircle, SlidersHorizontal, FileWarning } from 'lucide-vue-next';

defineProps<{
  hasData: boolean;
  isProcessed: boolean;
}>();

const selectedModel = ref('');
const isTraining = ref(false);
const trainingComplete = ref(false);

const models = [
  { id: 'regression', name: 'Linear Regression', description: 'Predict a continuous value based on linear relationships.', useCase: 'Price prediction, sales forecasting' },
  { id: 'kmeans', name: 'K-Means Clustering', description: 'Group similar data points into clusters.', useCase: 'Customer segmentation, data categorization' },
  { id: 'decisiontree', name: 'Decision Tree', description: 'An interpretable model that splits data based on feature values.', useCase: 'Rule-based decisions, feature importance' },
  { id: 'randomforest', name: 'Random Forest', description: 'An ensemble method for classification and regression.', useCase: 'High accuracy, robust predictions' },
  { id: 'svm', name: 'Support Vector Machine', description: 'A powerful classification and regression algorithm.', useCase: 'Text classification, image recognition' },
  { id: 'naivebayes', name: 'Naive Bayes', description: "A probabilistic classifier based on Bayes' theorem.", useCase: 'Spam filtering, text classification' },
];

const handleTraining = () => {
  isTraining.value = true;
  trainingComplete.value = false;
  setTimeout(() => {
    isTraining.value = false;
    trainingComplete.value = true;
  }, 3000);
};
</script>

<style scoped>
.fade-transform-enter-active,
.fade-transform-leave-active {
  transition: opacity 0.5s ease, transform 0.5s ease;
}
.fade-transform-enter-from,
.fade-transform-leave-to {
  opacity: 0;
  transform: translateY(20px);
}
</style>
