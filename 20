<template>
  <div class="space-y-8">
    <div class="bg-white rounded-xl shadow-lg p-8">
      <h2 class="text-2xl font-semibold text-gray-900 mb-6 flex items-center">
        <Camera class="h-6 w-6 mr-2 text-blue-600" />
        Image Recognition
      </h2>

      <div
        ref="dropZoneRef"
        :class="[
          'border-2 border-dashed rounded-lg p-12 text-center cursor-pointer transition-colors',
          isOverDropZone
            ? 'border-blue-400 bg-blue-50'
            : 'border-gray-300 hover:border-blue-400 hover:bg-gray-50'
        ]"
        @click="open"
      >
        <input ref="fileInput" type="file" @change="onFileChange" accept="image/*" class="hidden" />
        <Upload class="h-12 w-12 text-gray-400 mx-auto mb-4" />
        <h3 class="text-lg font-medium text-gray-900 mb-2">
          {{ isOverDropZone ? 'Drop image here' : 'Upload an image' }}
        </h3>
        <p class="text-gray-600 mb-4">
          Drag and drop an image, or click to browse
        </p>
        <div class="text-sm text-gray-500">
          Supported formats: PNG, JPG, JPEG, GIF (Max size: 10MB)
        </div>
      </div>

      <div class="mt-8">
        <h3 class="text-lg font-medium text-gray-900 mb-4">Or try with a sample image:</h3>
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
          <img
            v-for="(image, index) in sampleImages"
            :key="index"
            :src="image"
            :alt="`Sample ${index + 1}`"
            class="w-full h-32 object-cover rounded-lg cursor-pointer hover:opacity-80 transition-opacity"
            @click="selectSampleImage(image)"
          />
        </div>
      </div>
    </div>

    <transition name="fade-transform">
      <div v-if="uploadedImage || isAnalyzing" class="bg-white rounded-xl shadow-lg p-8">
        <h3 class="text-xl font-semibold text-gray-900 mb-6">Analysis Results</h3>
        
        <div class="grid md:grid-cols-2 gap-8">
          <div>
            <div class="aspect-square bg-gray-100 rounded-lg overflow-hidden">
              <img
                v-if="uploadedImage"
                :src="uploadedImage"
                alt="Uploaded"
                class="w-full h-full object-cover"
              />
            </div>
          </div>

          <div>
            <div v-if="isAnalyzing" class="flex items-center justify-center h-full">
              <div class="text-center">
                <Zap class="h-12 w-12 text-blue-600 mx-auto mb-4 animate-pulse" />
                <p class="text-gray-600">Analyzing image...</p>
              </div>
            </div>
            <div v-else-if="prediction">
              <div class="flex items-center mb-4">
                <CheckCircle class="h-6 w-6 text-green-600 mr-2" />
                <h4 class="text-lg font-semibold text-gray-900">Prediction Complete</h4>
              </div>

              <div class="mb-6">
                <div class="text-3xl font-bold text-blue-600 mb-2">
                  {{ prediction.category }}
                </div>
                <div class="text-gray-600">
                  Confidence: {{(prediction.confidence * 100).toFixed(1)}}%
                </div>
              </div>

              <div>
                <h5 class="font-medium text-gray-900 mb-3">Top Predictions:</h5>
                <div class="space-y-2">
                  <div v-for="(pred, index) in prediction.predictions" :key="index" class="flex items-center justify-between">
                    <span class="text-gray-700">{{ pred.label }}</span>
                    <div class="flex items-center space-x-2">
                      <div class="w-24 bg-gray-200 rounded-full h-2">
                        <div
                          class="bg-blue-600 h-2 rounded-full"
                          :style="{ width: `${pred.confidence * 100}%` }"
                        ></div>
                      </div>
                      <span class="text-sm text-gray-600 w-12">
                        {{(pred.confidence * 100).toFixed(1)}}%
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </transition>
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue';
import { useDropZone } from '@vueuse/core';
import { Camera, Upload, Zap, CheckCircle } from 'lucide-vue-next';

const uploadedImage = ref<string | null>(null);
const prediction = ref<any>(null);
const isAnalyzing = ref(false);

const dropZoneRef = ref<HTMLDivElement>();
const fileInput = ref<HTMLInputElement>();

function handleFiles(files: File[] | null) {
  if (files && files.length > 0) {
    const file = files[0];
    if (file.size > 10 * 1024 * 1024) {
      alert("File size cannot exceed 10MB.");
      return;
    }
    const imageUrl = URL.createObjectURL(file);
    uploadedImage.value = imageUrl;
    analyzeImage();
  }
}

const { isOverDropZone } = useDropZone(dropZoneRef, {
  onDrop: handleFiles,
  dataTypes: ['image/*']
});

function onFileChange(event: Event) {
  const target = event.target as HTMLInputElement;
  handleFiles(target.files ? Array.from(target.files) : null);
}

function open() {
  fileInput.value?.click();
}

const analyzeImage = () => {
  isAnalyzing.value = true;
  prediction.value = null;
  setTimeout(() => {
    prediction.value = {
      category: 'Cat',
      confidence: 0.94,
      predictions: [
        { label: 'Cat', confidence: 0.94 },
        { label: 'Dog', confidence: 0.04 },
        { label: 'Tiger', confidence: 0.02 },
      ],
    };
    isAnalyzing.value = false;
  }, 2000);
};

const sampleImages = [
  'https://images.unsplash.com/photo-1514888286974-6c03e2ca1dba?w=300&h=200&fit=crop',
  'https://images.unsplash.com/photo-1552053831-71594a27632d?w=300&h=200&fit=crop',
  'https://images.unsplash.com/photo-1517849845537-4d257902454a?w=300&h=200&fit=crop',
  'https://images.unsplash.com/photo-1518717758536-85ae29035b6d?w=300&h=200&fit=crop',
];

const selectSampleImage = (image: string) => {
  uploadedImage.value = image;
  analyzeImage();
};
</script>

<style scoped>
.fade-transform-enter-active,
.fade-transform-leave-active {
  transition: opacity 0.5s ease, transform 0.5s ease;
}
.fade-transform-enter-from,
.fade-transform-leave-to {
  opacity: 0;
  transform: translateY(20px);
}
</style>
