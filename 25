<template>
  <div class="min-h-screen py-8 bg-gray-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12">
        <h1 class="text-4xl font-bold text-gray-900 mb-4">Machine Learning Projects</h1>
        <p class="text-xl text-gray-600 max-w-3xl mx-auto">
          Explore common ML projects with explanations, algorithms, and example results.
        </p>
      </div>

      <div class="grid md:grid-cols-1 lg:grid-cols-2 gap-8">
        <div v-for="(project, index) in projects" :key="index">
          <ProjectCard :project="project" />
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { defineComponent, shallowRef } from 'vue';
import { FlaskConical, ClipboardList, Code2 } from 'lucide-vue-next';
import { faker } from '@faker-js/faker';

import { use } from 'echarts/core';
import { CanvasRenderer } from 'echarts/renderers';
import { BarChart, LineChart, PieChart, ScatterChart } from 'echarts/charts';
import { GridComponent, TooltipComponent, LegendComponent } from 'echarts/components';
import VChart from 'vue-echarts';

use([CanvasRenderer, BarChart, LineChart, PieChart, ScatterChart, GridComponent, TooltipComponent, LegendComponent]);

const ProjectCard = defineComponent({
  name: 'ProjectCard',
  components: { VChart, FlaskConical, ClipboardList, Code2 },
  props: {
    project: {
      type: Object,
      required: true,
    },
  },
  setup(props) {
    const fieldConfig: Record<string, { icon: any; color: string }> = {
      'Data Science': { icon: shallowRef(FlaskConical), color: 'bg-indigo-100 text-indigo-800' },
      'Data Analysis': { icon: shallowRef(ClipboardList), color: 'bg-green-100 text-green-800' },
      'ML Engineering': { icon: shallowRef(Code2), color: 'bg-pink-100 text-pink-800' },
    };
    const config = fieldConfig[props.project.field as keyof typeof fieldConfig] || fieldConfig['Data Science'];
    return { config };
  },
  template: `
    <div class="bg-white rounded-xl shadow-lg overflow-hidden flex flex-col h-full">
      <div class="p-6 flex-grow">
        <div class="flex justify-between items-start mb-4">
          <h3 class="text-xl font-bold text-gray-900 pr-4">{{ project.title }}</h3>
          <span :class="['flex items-center text-xs font-semibold px-2.5 py-0.5 rounded-full shrink-0', config.color]">
            <component :is="config.icon" class="h-3 w-3 mr-1" />
            {{ project.field }}
          </span>
        </div>
        <p class="text-gray-600 text-sm mb-4">{{ project.description }}</p>
        
        <div class="space-y-3 text-sm mb-4">
          <div class="flex"><strong class="w-28 shrink-0 text-gray-500">Algorithm:</strong><span class="text-gray-800">{{ project.algorithm }}</span></div>
          <div class="flex"><strong class="w-28 shrink-0 text-gray-500">Formula/Concept:</strong><code class="bg-gray-100 px-2 py-1 rounded text-gray-800">{{ project.formula }}</code></div>
          <div class="flex"><strong class="w-28 shrink-0 text-gray-500">Dataset:</strong><span class="text-gray-800">{{ project.dataset }}</span></div>
        </div>
      </div>
      <div class="p-6 pt-0">
        <h4 class="text-md font-semibold text-gray-800 mb-2">Example Result / Calculation</h4>
        <div class="bg-gray-50 p-2 rounded-lg">
          <div v-if="project.chartType" class="h-[200px]">
            <v-chart :option="project.chartOption" autoresize />
          </div>
          <div v-else v-html="project.customChart"></div>
        </div>
      </div>
    </div>
  `,
});

const projects = [
  {
    category: 'Data Mining', field: 'Data Science', title: 'Stock Price Prediction',
    description: 'Using time-series analysis to forecast future stock or cryptocurrency prices based on historical data.',
    algorithm: 'Regression / LSTM', formula: 'y = mx + b (Linear Regression)', dataset: 'Yahoo Finance, Binance API',
    chartType: 'line',
    chartOption: {
      tooltip: { trigger: 'axis' }, legend: {}, xAxis: { type: 'category', data: Array.from({ length: 12 }, (_, i) => `Day ${i + 1}`) }, yAxis: { type: 'value' },
      series: [
        { name: 'Actual', type: 'line', data: Array.from({ length: 12 }, () => faker.number.float({ min: 100, max: 200, fractionDigits: 2 })), smooth: true },
        { name: 'Predicted', type: 'line', data: Array.from({ length: 12 }, () => faker.number.float({ min: 100, max: 200, fractionDigits: 2 })), smooth: true },
      ],
    },
  },
  {
    category: 'Data Mining', field: 'Data Science', title: 'Customer Segmentation',
    description: 'Grouping customers into distinct segments based on purchasing behavior or demographics for targeted marketing.',
    algorithm: 'K-Means Clustering', formula: 'minimize Î£ ||x - Î¼i||Â²', dataset: 'E-commerce transaction data',
    chartType: 'scatter',
    chartOption: {
      tooltip: { trigger: 'item' }, legend: {}, xAxis: { name: 'Spending Score' }, yAxis: { name: 'Income' },
      series: [
        { name: 'Cluster 1', type: 'scatter', data: Array.from({ length: 20 }, () => [faker.number.float({ min: 10, max: 100 }), faker.number.float({ min: 10, max: 100 })]), itemStyle: { color: '#8884d8' } },
        { name: 'Cluster 2', type: 'scatter', data: Array.from({ length: 20 }, () => [faker.number.float({ min: 10, max: 100 }), faker.number.float({ min: 10, max: 100 })]), itemStyle: { color: '#82ca9d' } },
        { name: 'Cluster 3', type: 'scatter', data: Array.from({ length: 20 }, () => [faker.number.float({ min: 10, max: 100 }), faker.number.float({ min: 10, max: 100 })]), itemStyle: { color: '#ffc658' } },
      ],
    },
  },
  {
    category: 'Data Mining', field: 'Data Analysis', title: 'Sentiment Analysis',
    description: 'Analyzing product reviews to determine if the sentiment is positive, negative, or neutral using Natural Language Processing (NLP).',
    algorithm: 'NLP / Naive Bayes', formula: 'P(A|B) = [P(B|A) * P(A)] / P(B)', dataset: 'Amazon/Yelp Reviews',
    chartType: 'bar',
    chartOption: {
      tooltip: { trigger: 'axis' }, legend: {}, xAxis: { type: 'category', data: ['Positive', 'Neutral', 'Negative'] }, yAxis: { type: 'value' },
      series: [{ name: 'Review Count', type: 'bar', data: [faker.number.int({ min: 500, max: 1000 }), faker.number.int({ min: 200, max: 500 }), faker.number.int({ min: 100, max: 300 })] }],
    },
  },
  {
    category: 'Data Mining', field: 'Data Science', title: 'Fraud Detection',
    description: 'Identifying suspicious patterns in financial transactions to detect and prevent fraudulent activities.',
    algorithm: 'Decision Tree / Random Forest', formula: 'Gini Impurity / Information Gain', dataset: 'Credit Card Transactions',
    chartType: 'pie',
    chartOption: {
      tooltip: { trigger: 'item' }, legend: {},
      series: [{
        name: 'Transactions', type: 'pie', radius: '70%',
        data: [
          { value: faker.number.int({ min: 950, max: 1000 }), name: 'Not Fraud', itemStyle: { color: '#82ca9d' } },
          { value: faker.number.int({ min: 10, max: 50 }), name: 'Fraud', itemStyle: { color: '#EF4444' } },
        ],
      }],
    },
  },
  {
    category: 'Data Mining', field: 'Data Science', title: 'Customer Churn Prediction',
    description: 'Predicting which customers are likely to stop using a service, allowing for proactive retention efforts.',
    algorithm: 'Classification (Logistic Regression)', formula: 'P(y=1) = 1 / (1 + e^-z)', dataset: 'Subscription Service Data',
    chartType: 'bar',
    chartOption: {
      grid: { containLabel: true }, tooltip: { trigger: 'axis' },
      xAxis: { type: 'value' }, yAxis: { type: 'category', data: ['Will Churn', 'Will Not Churn'] },
      series: [{ name: 'Customer Count', type: 'bar', data: [150, 850], itemStyle: { color: '#ffc658' } }],
    },
  },
  {
    category: 'Web/Mobile', field: 'ML Engineering', title: 'Product Recommendation System',
    description: 'Suggesting products to users based on their past behavior or the behavior of similar users.',
    algorithm: 'Collaborative Filtering', formula: 'Similarity(A, B) = cos(Î¸)', dataset: 'User ratings, purchase history',
    customChart: `<div class="text-center p-4 h-[200px] flex flex-col justify-center"><h4 class="font-semibold mb-2">Example Recommendation</h4><div class="flex justify-around items-center"><div class="text-center"><p>User A likes:</p><p class="font-bold">ðŸ“±, ðŸ’»</p></div><p class="text-2xl">+</p><div class="text-center"><p>User B likes:</p><p class="font-bold">ðŸ“±, ðŸ’», âŒš</p></div><p class="text-2xl">â†’</p><div class="text-center"><p>Recommend to A:</p><p class="font-bold text-blue-600 text-2xl">âŒš</p></div></div></div>`
  },
  {
    category: 'Web/Mobile', field: 'ML Engineering', title: 'Intelligent Chatbot with NLP',
    description: 'Automated customer service using advanced language models like BERT or GPT to understand and respond to user queries.',
    algorithm: 'Transformers (BERT/GPT)', formula: 'Attention(Q, K, V)', dataset: 'Conversation logs, FAQs',
    customChart: `<div class="text-sm p-4 bg-gray-50 rounded-lg h-[200px] flex flex-col justify-center"><p><span class="font-bold text-blue-600">User:</span> How do I reset my password?</p><p class="mt-2"><span class="font-bold text-green-600">Bot:</span> You can reset your password by going to "Settings" > "Security" and clicking "Reset Password".</p></div>`
  },
  {
    category: 'Web/Mobile', field: 'ML Engineering', title: 'Image Recognition',
    description: 'Automatically identify and label objects in user-uploaded images, such as plant species or food items.',
    algorithm: 'Convolutional Neural Network (CNN)', formula: 'Convolution + Pooling Layers', dataset: 'ImageNet, Custom Image Sets',
    customChart: `<div class="text-center p-4 h-[200px] flex flex-col justify-center"><img src="https://images.unsplash.com/photo-1514888286974-6c03e2ca1dba?w=200&h=120&fit=crop" alt="cat" class="mx-auto rounded-lg mb-2" /><p>Prediction: <span class="font-bold text-blue-600">Cat (94% confidence)</span></p></div>`
  },
];
</script>
