<template>
  <div class="min-h-screen py-8">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-8">
        <h1 class="text-3xl font-bold text-white mb-2">Asisten AI</h1>
        <p class="text-slate-400">Dapatkan bantuan cerdas untuk proyek machine learning Anda.</p>
      </div>

      <div class="bg-slate-850 border border-slate-800 rounded-xl shadow-lg overflow-hidden flex flex-col" style="height: 75vh;">
        <div class="bg-slate-800 p-4 border-b border-slate-700">
          <div class="flex items-center space-x-3">
            <div class="relative">
              <Bot class="h-8 w-8 text-blue-400" />
              <span class="absolute bottom-0 right-0 block h-2.5 w-2.5 rounded-full bg-green-400 ring-2 ring-slate-800"></span>
            </div>
            <div>
              <h3 class="font-semibold text-white">Asisten ML</h3>
              <p class="text-sm text-slate-400">Online</p>
            </div>
          </div>
        </div>

        <div class="flex-1 overflow-y-auto p-4 space-y-4" ref="messagesContainer">
          <transition-group name="message">
            <div v-for="message in messages" :key="message.id" :class="['flex', message.isBot ? 'justify-start' : 'justify-end']">
              <div :class="['flex items-start space-x-3 max-w-xs lg:max-w-md', message.isBot ? 'flex-row' : 'flex-row-reverse space-x-reverse']">
                <div :class="['w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0', message.isBot ? 'bg-slate-700' : 'bg-blue-600']">
                  <Bot v-if="message.isBot" class="h-4 w-4 text-blue-300" />
                  <User v-else class="h-4 w-4 text-white" />
                </div>
                <div :class="['rounded-lg p-3', message.isBot ? 'bg-slate-800 text-slate-300' : 'bg-blue-600 text-white']">
                  <p class="text-sm">{{ message.text }}</p>
                  <p :class="['text-xs mt-1 text-right', message.isBot ? 'text-slate-500' : 'text-blue-200']">
                    {{ message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) }}
                  </p>
                </div>
              </div>
            </div>
          </transition-group>

          <div v-if="isTyping" class="flex justify-start">
            <div class="flex items-start space-x-3">
              <div class="w-8 h-8 rounded-full bg-slate-700 flex items-center justify-center flex-shrink-0"><Bot class="h-4 w-4 text-blue-300" /></div>
              <div class="bg-slate-800 rounded-lg p-3">
                <div class="flex space-x-1">
                  <div class="w-2 h-2 bg-slate-500 rounded-full animate-bounce"></div>
                  <div class="w-2 h-2 bg-slate-500 rounded-full animate-bounce" style="animation-delay: 0.1s"></div>
                  <div class="w-2 h-2 bg-slate-500 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="border-t border-slate-800 p-4">
          <div class="flex flex-wrap gap-2">
            <button v-for="action in quickActions" :key="action" @click="sendQuickAction(action)" class="text-sm bg-slate-800 text-slate-300 px-3 py-1 rounded-full hover:bg-slate-700 transition-colors border border-slate-700">
              {{ action }}
            </button>
          </div>
        </div>

        <div class="border-t border-slate-800 p-4 bg-slate-800">
          <div class="flex items-center space-x-2">
            <textarea v-model="inputText" @keypress.enter.prevent="handleSendMessage" placeholder="Tanyakan apa saja..." class="w-full p-3 bg-slate-700 border border-slate-600 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white" rows="1"></textarea>
            <button @click="handleSendMessage" :disabled="!inputText.trim()" class="bg-blue-600 text-white p-3 rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors">
              <Send class="h-5 w-5" />
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, onUpdated } from 'vue';
import { Send, Bot, User } from 'lucide-vue-next';

interface Message { id: string; text: string; isBot: boolean; timestamp: Date; }

const messages = ref<Message[]>([
  { id: '1', text: 'Halo! Saya adalah asisten AI Anda. Ada yang bisa saya bantu hari ini?', isBot: true, timestamp: new Date() },
]);
const inputText = ref('');
const isTyping = ref(false);
const messagesContainer = ref<HTMLDivElement | null>(null);

const scrollToBottom = () => { messagesContainer.value?.scrollTo({ top: messagesContainer.value.scrollHeight, behavior: 'smooth' }); };
onUpdated(scrollToBottom);

const botResponses: Record<string, string> = {
  default: "Itu pertanyaan yang menarik. Berdasarkan data Anda, saya sarankan memulai dengan model regresi linier untuk membuat baseline.",
  'Jelaskan dasar-dasar ML': "Tentu! Machine Learning (ML) adalah bidang AI yang memungkinkan sistem belajar dari data. Tiga jenis utama adalah Supervised Learning (belajar dari data berlabel), Unsupervised Learning (menemukan pola dalam data tak berlabel), dan Reinforcement Learning (belajar melalui trial and error).",
  'Bantu dengan pra-pemrosesan data': "Pra-pemrosesan sangat penting! Langkah umum termasuk menangani nilai yang hilang (menghapus atau mengisi), penskalaan fitur (normalisasi atau standardisasi), dan mengkodekan variabel kategorikal (one-hot atau label encoding). Mana yang ingin Anda diskusikan lebih lanjut?",
  'Sarankan sebuah model': "Tentu, itu tergantung pada masalah Anda. Untuk memprediksi nilai kontinu (seperti harga rumah), coba Regresi Linier. Untuk mengklasifikasikan data ke dalam grup (seperti spam vs bukan spam), coba Regresi Logistik atau Pohon Keputusan. Untuk mengelompokkan data serupa, K-Means adalah titik awal yang bagus.",
  'Interpretasikan hasil saya': "Untuk menginterpretasikan hasil, lihat metrik evaluasi. Untuk klasifikasi, akurasi, presisi, recall, dan F1-score adalah kunci. Untuk regresi, periksa R-squared dan Mean Squared Error (MSE). Metrik mana yang Anda lihat?",
};

const sendMessage = (text: string) => {
  if (!text.trim()) return;
  messages.value.push({ id: Date.now().toString(), text, isBot: false, timestamp: new Date() });
  isTyping.value = true;
  
  setTimeout(() => {
    const responseText = botResponses[text] || botResponses.default;
    messages.value.push({ id: (Date.now() + 1).toString(), text: responseText, isBot: true, timestamp: new Date() });
    isTyping.value = false;
  }, 1500);
};

const handleSendMessage = () => {
  sendMessage(inputText.value);
  inputText.value = '';
};

const sendQuickAction = (action: string) => {
  sendMessage(action);
};

const quickActions = ['Jelaskan dasar-dasar ML', 'Bantu dengan pra-pemrosesan data', 'Sarankan sebuah model', 'Interpretasikan hasil saya'];
</script>

<style scoped>
.message-enter-active, .message-leave-active { transition: all 0.5s ease; }
.message-enter-from, .message-leave-to { opacity: 0; transform: translateY(20px); }
textarea { scrollbar-width: none; }
textarea::-webkit-scrollbar { display: none; }
</style>
